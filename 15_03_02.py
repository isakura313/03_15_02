# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xQc5YBu_g03_7VbaZZ0CYkqqfb-BM2iS
"""

pip install python-telegram-bot

pip install -U ipykernel

"""Простой бот для отправки сообщений с задержкой
Этт использует два класса: Updater для отправки сообщений
JobQueue для отправки замедленных сообщений
Сначала определяется несколько обработчиков. Затем эти функции проходят через Dispatcher, который будем назначать наши функции на команды типа /start /help
А на самом деле в данной вариации - это простой бот будильник, который может напоминать о каком-то деле через некоторое время
"""

import logging
#используется для вывода красивых логрв, если у нашем приложении возникли какие-то проблемы

from telegram.ext import Updater, CommandHandler 


#активируем наше логирование
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level = logging.INFO)

logger = logging.getLogger(__name__)

#Определяем наши основные команды
def start(update, context):
  """Основная команда, которую увидит пользователь на инициализации"""
  update.message.reply_text("Привет! Используй /set <seconds>, чтобы установить таймер")

def alarm(context):
  """Создание звука нашего будильника """
  job = context.job
  context.bot.send_message(job.context, text="Wake up Neo. The Matrix has you...")

def set_timer(update, context):
  """ Добавляет занятие нашего бота в очередь """
  chat_id = update.message.chat_id
  try:
    #args[0] должен содержать количество времени
    due = int(context.args[0])
    if due < 0:
      update.message.reply_text("Сейчас приедет полиция времени!")
      return

    if "job" in context.chat_data:
      old_job = context.chat_data['job']
      old_job.schedule_removal()
    new_job = context.job_queue.run_once(alarm, due, context = chat_id)
    context.chat_data['job'] = new_job

    update.message.reply_text("Дело сделано! Таймер был установлен")
  except (IndexError, ValueError):
    update.message.reply_text("Ты что сюда вбиваешь! Бот может обидиться!")


def unset(update, context):
  """  Удаляем занятие, если пользователь решил передумать """
  if 'job' not in context.chat_data:
    update.message.reply_text("У вас нет активного таймера")
    return

  job = context.chat_data['job']
  job.schedule_removal()
  del context.chat_data['job']

  update.message.reply_text("Таймер был успешно удален")

def error(update, context):
  """  Логирование ошибок, если что-то пошло не так с отправкой сообщения """
  logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
  """ Запуск нашего бота"""

  updater = Updater("1011052536:AAHisa_bm9Iaom9JGq8-Qco-xcDOdciaBIo", use_context = True)

  dp = updater.dispatcher


  dp.add_handler(CommandHandler("start", start))
  dp.add_handler(CommandHandler("help", start))
  dp.add_handler(CommandHandler("set", set_timer, pass_args = True,  pass_job_queue = True, pass_chat_data = True))
  dp.add_handler(CommandHandler("unset", unset, pass_chat_data = True))
  dp.add_error_handler(error)
  updater.start_polling()

  updater.idle()


main()